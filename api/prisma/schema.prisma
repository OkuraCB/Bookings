generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Token {
  id        Int       @id @default(autoincrement())

  createdAt DateTime? @default(now()) @map("create_time") @db.Timestamp(0)
  updatedAt DateTime? @map("update_time") @db.Timestamp(0)

  active    Boolean   @default(true)
  token   String    @db.VarChar(3000)

  userId    Int       @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_users_tokens")

  @@index([userId], map: "fk_tokens_users1_idx")
  @@map("tokens")
}

model User {
  id        Int       @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updatedAt DateTime? @map("update_time") @db.Timestamp(0)

  name      String    @db.VarChar(100)
  email     String    @unique(map: "email_UNIQUE") @db.VarChar(300)
  password  String    @db.VarChar(300)

  tokens    Token[]

  @@map("users")
}

model People {
  id        Int       @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updatedAt DateTime? @map("update_time") @db.Timestamp(0)

  name      String    @db.VarChar(100)
  email     String    @unique(map: "email_UNIQUE") @db.VarChar(300)

  meetings Meeting[]

  @@map("people")
}

model Representative {
  id        Int       @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updatedAt DateTime? @map("update_time") @db.Timestamp(0)

  name      String    @db.VarChar(100)
  email     String    @unique(map: "email_UNIQUE") @db.VarChar(300)
  customer  String    @db.VarChar(100)

  meetings Meeting[]

  @@map("representatives")
}

model Rooms {
  id        Int       @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updatedAt DateTime? @map("update_time") @db.Timestamp(0)

  name      String    @db.VarChar(100)
  capacity  Int

  meetings Meeting[]

  @@map("rooms")
}

model Meeting {
  id        Int       @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updatedAt DateTime? @map("update_time") @db.Timestamp(0)

  name      String
  description   String?
  start         DateTime
  end           DateTime
  roomId        Int?

  customerRepresentative  Representative[] 
  invited                 People[]
  room                    Rooms? @relation(fields: [roomId], references: [id], map: "fk_meeting_room1")

  gravity       String

  @@map("meeting")
}

enum MeetingGravity {
  mandatory      @map("Mandatory")
  optional          @map("Optional")

  @@map("meeting_gravity")
}